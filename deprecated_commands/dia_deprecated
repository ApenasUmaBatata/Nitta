const connection = require("../../configs/db");
const COOLDOWN_TIME = 24 * 60 * 60 * 1000;

module.exports = {
  config: {
    name: "diaria",
    aliases: ["dia", "daily"],
  },
  run: async (bot, message, args, tools) => {
    const userId = message.author.id;
    const guildId = message.guild.id;
    connection.query(
      `SELECT * FROM pessoa WHERE user_id = ? AND guild_id = ?`,
      [userId, guildId],
      (error, results) => {
        if (error) throw error;

        if (results.length === 0) {
          message.reply(
            "VocÃª nÃ£o possui registro. Utilize o comando `registrar` para comeÃ§ar a receber recompensas diÃ¡rias."
          );
        } else {
          const lastClaimedDate = new Date(results[0].last_claimed);
          const currentDate = new Date();

          const timeSinceLastClaimed =
            currentDate.getTime() - lastClaimedDate.getTime();

          if (timeSinceLastClaimed >= COOLDOWN_TIME) {
            const newCoins = Math.max(Math.floor(Math.random() * 100) + 1, 20);
            const somaNewCoins = results[0].coins + newCoins;
            const newGems = Math.floor(Math.random() * 10) + 1;
            const somaNewGems = results[0].gems + newGems;

            connection.query(
              "UPDATE pessoa SET coins = ?, gems = ?, last_claimed = ? WHERE user_id = ? AND guild_id = ?",
              [somaNewCoins, somaNewGems, currentDate, userId, guildId],
              (error, results) => {
                if (error) throw error;
                message
                  .reply(
                    `${message.author.username} vocÃª acabou de receber **ğŸ”† ${newCoins}** moedas sagradas e **${newGems}** gemas celestiais!`
                  )
                  .then((repliedMessage) => {
                    setTimeout(() => repliedMessage.delete(), 5000);
                    setTimeout(() => message.delete(), 5000);
                  });
              }
            );
          } else {
            const remainingTime = COOLDOWN_TIME - timeSinceLastClaimed;
            const remainingHours = Math.floor(remainingTime / (60 * 60 * 1000));
            const remainingMinutes = Math.floor(
              (remainingTime % (60 * 60 * 1000)) / (60 * 1000)
            );

            message
              .reply(
                `vocÃª jÃ¡ coletou suas moedas sagradas hoje! Tente novamente em: ${remainingHours} horas e ${remainingMinutes} minutos.`
              )
              .then((repliedMessage) => {
                setTimeout(() => repliedMessage.delete(), 5000);
                setTimeout(() => message.delete(), 5000);
              });
          }
        }
      }
    );
  },
};
